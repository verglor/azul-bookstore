plugins {
	id 'java'
	id 'groovy'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.16.0'
	id 'jacoco'
}

group = 'com.verglor.azul.bookstore'
version = '0.0.1-SNAPSHOT'
description = 'azul-bookstore'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// OpenAPI/Swagger dependencies for generated code
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

	implementation 'org.liquibase:liquibase-core'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spock Framework for testing
	testImplementation 'org.spockframework:spock-core:2.4-M6-groovy-4.0'
	testImplementation 'org.spockframework:spock-spring:2.4-M6-groovy-4.0'
	testImplementation 'org.apache.groovy:groovy-all:4.0.28'

	// RestAssured for integration testing
	testImplementation 'io.rest-assured:rest-assured:5.5.6'
	testImplementation 'io.rest-assured:json-path:5.5.6'
	testImplementation 'io.rest-assured:xml-path:5.5.6'

	// TestContainers for integration tests
	testImplementation 'org.testcontainers:junit-jupiter:1.21.3'
	testImplementation 'org.testcontainers:spock:1.21.3'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

// OpenAPI Generator Configuration
openApiGenerate {
	// Input OpenAPI specification file
	inputSpec = "$projectDir/src/main/resources/api/openapi-spec.yaml".toString()

	// Output directory for generated files
	outputDir = "$buildDir/generated".toString()

	// Generator to use - spring for Spring Boot interfaces and models
	generatorName = "spring"

	// Package configuration
	configOptions = [
		"basePackage"             : "com.verglor.azul.bookstore.openapi",
		"modelPackage"            : "com.verglor.azul.bookstore.openapi.model",
		"apiPackage"              : "com.verglor.azul.bookstore.openapi.api",
		"useSpringBoot3"          : "true",        // Use Spring Boot 3 annotations
		"delegatePattern"         : "true",        // Use delegate pattern
		"performBeanValidation"   : "true",        // Generate Bean Validation annotations
		"generateBuilders"        : "true"         // Generate builders for models
	]
}

// Make the openApiGenerate task run automatically when building
compileJava.dependsOn 'openApiGenerate'

// Configure the generated source directory to be included in compilation
sourceSets {
	main {
		java {
			srcDirs += "${buildDir}/generated/src/main/java"
			// Exclude generated OpenApiGeneratorApplication
			exclude 'com/verglor/azul/bookstore/openapi/OpenApiGeneratorApplication.java'
		}
	}
}

processResources {
	from('src/main/resources/api') {
		into 'public/api/v1'
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Enable JaCoCo for all test tasks
}

jacocoTestReport {
	dependsOn test

	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}
